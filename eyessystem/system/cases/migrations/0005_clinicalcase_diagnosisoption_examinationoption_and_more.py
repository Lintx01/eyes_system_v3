# Generated by Django 5.2.6 on 2025-10-11 01:58

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cases', '0004_add_is_passed_field'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicalCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='案例标题')),
                ('case_id', models.CharField(max_length=50, unique=True, verbose_name='案例编号')),
                ('patient_age', models.IntegerField(verbose_name='患者年龄')),
                ('patient_gender', models.CharField(choices=[('M', '男'), ('F', '女')], max_length=10, verbose_name='患者性别')),
                ('chief_complaint', models.TextField(verbose_name='主诉')),
                ('present_illness', models.TextField(verbose_name='现病史')),
                ('past_history', models.TextField(blank=True, verbose_name='既往史')),
                ('family_history', models.TextField(blank=True, verbose_name='家族史')),
                ('learning_objectives', models.JSONField(help_text='JSON格式存储多个学习目标', verbose_name='学习目标')),
                ('difficulty_level', models.CharField(choices=[('beginner', '初级'), ('intermediate', '中级'), ('advanced', '高级')], default='intermediate', max_length=20, verbose_name='难度等级')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('case_images', models.JSONField(blank=True, help_text='存储图片路径的JSON数组', null=True, verbose_name='案例图片')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '临床案例',
                'verbose_name_plural': '临床案例',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_name', models.CharField(max_length=200, verbose_name='诊断名称')),
                ('diagnosis_code', models.CharField(blank=True, max_length=50, verbose_name='诊断编码(ICD-10)')),
                ('is_correct_diagnosis', models.BooleanField(default=False, verbose_name='是否正确诊断')),
                ('is_differential', models.BooleanField(default=True, verbose_name='是否鉴别诊断')),
                ('supporting_evidence', models.TextField(verbose_name='支持依据')),
                ('contradicting_evidence', models.TextField(blank=True, verbose_name='反对依据')),
                ('typical_symptoms', models.JSONField(help_text='JSON格式存储症状列表', verbose_name='典型症状')),
                ('typical_signs', models.JSONField(help_text='JSON格式存储体征列表', verbose_name='典型体征')),
                ('correct_feedback', models.TextField(verbose_name='选择正确时的反馈')),
                ('incorrect_feedback', models.TextField(verbose_name='选择错误时的反馈')),
                ('probability_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='诊断概率分数')),
                ('display_order', models.IntegerField(default=0, verbose_name='显示顺序')),
                ('clinical_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_options', to='cases.clinicalcase', verbose_name='关联案例')),
            ],
            options={
                'verbose_name': '诊断选项',
                'verbose_name_plural': '诊断选项',
                'ordering': ['display_order', '-probability_score'],
            },
        ),
        migrations.CreateModel(
            name='ExaminationOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examination_type', models.CharField(choices=[('basic', '基础检查'), ('imaging', '影像检查'), ('laboratory', '实验室检查'), ('special', '特殊检查')], max_length=50, verbose_name='检查类型')),
                ('examination_name', models.CharField(max_length=100, verbose_name='检查名称')),
                ('examination_description', models.TextField(verbose_name='检查描述')),
                ('normal_result', models.TextField(verbose_name='正常结果描述')),
                ('abnormal_result', models.TextField(blank=True, verbose_name='异常结果描述')),
                ('actual_result', models.TextField(verbose_name='实际检查结果')),
                ('diagnostic_value', models.IntegerField(choices=[(1, '低'), (2, '中'), (3, '高')], default=2, verbose_name='诊断价值')),
                ('cost_effectiveness', models.IntegerField(choices=[(1, '低'), (2, '中'), (3, '高')], default=2, verbose_name='成本效益')),
                ('result_images', models.JSONField(blank=True, null=True, verbose_name='结果图片')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='是否推荐检查')),
                ('display_order', models.IntegerField(default=0, verbose_name='显示顺序')),
                ('clinical_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examination_options', to='cases.clinicalcase', verbose_name='关联案例')),
            ],
            options={
                'verbose_name': '检查选项',
                'verbose_name_plural': '检查选项',
                'ordering': ['display_order', 'examination_type'],
            },
        ),
        migrations.CreateModel(
            name='StudentClinicalSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_status', models.CharField(choices=[('history', '病史阶段'), ('examination', '检查阶段'), ('diagnosis', '诊断阶段'), ('treatment', '治疗阶段'), ('feedback', '反馈阶段'), ('completed', '已完成')], default='history', max_length=20, verbose_name='当前阶段')),
                ('selected_examinations', models.JSONField(default=list, verbose_name='已选检查项目')),
                ('selected_treatments', models.JSONField(default=list, verbose_name='已选治疗方案')),
                ('examination_score', models.FloatField(default=0.0, verbose_name='检查选择得分')),
                ('diagnosis_score', models.FloatField(default=0.0, verbose_name='诊断准确性得分')),
                ('treatment_score', models.FloatField(default=0.0, verbose_name='治疗方案得分')),
                ('overall_score', models.FloatField(default=0.0, verbose_name='总体得分')),
                ('time_spent', models.JSONField(default=dict, help_text='JSON格式记录各阶段耗时', verbose_name='各阶段用时')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='最后活动时间')),
                ('learning_notes', models.TextField(blank=True, verbose_name='学习笔记')),
                ('reflection', models.TextField(blank=True, verbose_name='学习反思')),
                ('clinical_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cases.clinicalcase', verbose_name='临床案例')),
                ('selected_diagnosis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cases.diagnosisoption', verbose_name='选择的诊断')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='学生')),
            ],
            options={
                'verbose_name': '学生临床会话',
                'verbose_name_plural': '学生临床会话',
                'ordering': ['-started_at'],
                'unique_together': {('student', 'clinical_case')},
            },
        ),
        migrations.CreateModel(
            name='TeachingFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_stage', models.CharField(choices=[('examination', '检查阶段'), ('diagnosis', '诊断阶段'), ('treatment', '治疗阶段'), ('overall', '总体反馈')], max_length=20, verbose_name='反馈阶段')),
                ('feedback_type', models.CharField(choices=[('positive', '积极反馈'), ('corrective', '纠正性反馈'), ('guidance', '指导性反馈'), ('encouragement', '鼓励性反馈')], max_length=20, verbose_name='反馈类型')),
                ('feedback_content', models.TextField(verbose_name='反馈内容')),
                ('improvement_suggestions', models.TextField(blank=True, verbose_name='改进建议')),
                ('reference_materials', models.JSONField(blank=True, help_text='相关学习资源链接', null=True, verbose_name='参考资料')),
                ('is_automated', models.BooleanField(default=True, verbose_name='是否自动生成')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('student_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='cases.studentclinicalsession', verbose_name='学生会话')),
            ],
            options={
                'verbose_name': '教学反馈',
                'verbose_name_plural': '教学反馈',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment_type', models.CharField(choices=[('medication', '药物治疗'), ('surgery', '手术治疗'), ('observation', '观察等待'), ('referral', '转诊'), ('lifestyle', '生活方式干预'), ('combination', '综合治疗')], max_length=50, verbose_name='治疗类型')),
                ('treatment_name', models.CharField(max_length=200, verbose_name='治疗方案名称')),
                ('treatment_description', models.TextField(verbose_name='治疗方案描述')),
                ('is_optimal', models.BooleanField(default=False, verbose_name='是否最佳治疗')),
                ('is_acceptable', models.BooleanField(default=True, verbose_name='是否可接受治疗')),
                ('is_contraindicated', models.BooleanField(default=False, verbose_name='是否禁忌')),
                ('efficacy_score', models.IntegerField(choices=[(1, '低'), (2, '中'), (3, '高')], default=2, verbose_name='疗效评分')),
                ('safety_score', models.IntegerField(choices=[(1, '低'), (2, '中'), (3, '高')], default=2, verbose_name='安全性评分')),
                ('cost_score', models.IntegerField(choices=[(1, '低'), (2, '中'), (3, '高')], default=2, verbose_name='成本评分')),
                ('expected_outcome', models.TextField(verbose_name='预期疗效')),
                ('potential_complications', models.TextField(blank=True, verbose_name='潜在并发症')),
                ('selection_feedback', models.TextField(verbose_name='选择该治疗时的反馈')),
                ('display_order', models.IntegerField(default=0, verbose_name='显示顺序')),
                ('clinical_case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='treatment_options', to='cases.clinicalcase', verbose_name='关联案例')),
                ('related_diagnosis', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cases.diagnosisoption', verbose_name='关联诊断')),
            ],
            options={
                'verbose_name': '治疗选项',
                'verbose_name_plural': '治疗选项',
                'ordering': ['display_order', '-efficacy_score'],
            },
        ),
    ]
